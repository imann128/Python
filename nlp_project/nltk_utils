import nltk
import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader

from nltk.stem.porter import PorterStemmer
stemmer = PorterStemmer()

def tokenize(sentence):
    return nltk.word_tokenize(sentence)

def stem(word):
    return stemmer.stem(word.lower())

def bag_of_words(tokenized_sentence,all_words):
    """""
    sentence = ["hello", "how", "are", "you"]
    words = ["hi", "hello", "I", "you", "bye", "thank", "cool"]
    bag = [   0,     1,      0,    1,     0,      0,      0]
    """""

    tokenized_sentence = [stem(w) for w in tokenized_sentence]

    bag = np.zeros(len(all_words), dtype=np.float32)
    for idx, w in enumerate(all_words):
        if w in tokenized_sentence:
          bag[idx] = 1.0

    return bag
class ChatDataset(Dataset):
    def __init__(self, x_data, y_data):
      self.n_samples = len(x_data)
      self.x_data = torch.from_numpy(x_data).float()
      self.y_data = torch.from_numpy(y_data).long()

    #Dataset[idx]
    def __getitem__(self, index):
        return self.x_data[index], self.y_data[index]


    def __len__(self):
        return self.n_samples


#words = ["organize", "organizes", "organizing"]
#stemmed_words = [stem(w) for w in words]
#print(stemmed_words)
